* CheatSheet: System Design For Job Interview                     :Interview:
:PROPERTIES:
:type:     interview
:export_file_name: cheatsheet-systemdesign-A4.pdf
:END:

#+BEGIN_HTML
<a href="https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-systemdesign-A4"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

- PDF Link: [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/blob/master/cheatsheet-systemdesign-A4/cheatsheet-systemdesign-A4.pdf][cheatsheet-systemdesign-A4.pdf]], Category: [[https://cheatsheet.dennyzhang.com/category/interview/][interview]]
- Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-systemdesign-A4
- Related posts: [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]], [[https://cheatsheet.dennyzhang.com/cheatsheet-paper-A4][CheatSheet: Well-Known Papers For IT Industry]], [[https://github.com/topics/denny-cheatsheets][#denny-cheatsheets]]

File me [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/issues][Issues]] or star [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com][this repo]].
** Reference
| Name       | Summary                                                                                |
|------------+----------------------------------------------------------------------------------------|
| Papers     | [[https://cheatsheet.dennyzhang.com/cheatsheet-paper-A4][CheatSheet: Well-Known Papers For IT Industry]], [[https://github.com/papers-we-love/papers-we-love][Github: papers-we-love]]                  |
| Github     | [[https://github.com/donnemartin/system-design-primer/tree/master/solutions/system_design][Github: system-design-primer]]                                                           |
| Cheatsheet | [[https://cheatsheet.dennyzhang.com/cheatsheet-behavior-A4][CheatSheet: Behavior Questions For Coder Interview]]                                     |
| Cheatsheet | [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]], [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]] |
| Coding     | [[https://code.dennyzhang.com/review-oodesign][Code problems for #oodesign]], [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]                   |
| YouTube    | [[https://www.youtube.com/watch?v=ZgdS0EUmn70][YouTube: Intro to Architecture and Systems Design Interviews]]                           |
| YouTube    | [[https://www.youtube.com/channel/UC-vYrOAmtrx9sBzJAf3x_xw/featured][YouTube Channel: Success in Tech]], [[https://www.youtube.com/watch?v=-W9F__D3oY4&feature=youtu.be][YouTube: Scalability Harvard Web Development]]         |
| YouTube    | [[https://www.youtube.com/channel/UC9vLsnF6QPYuH51njmIooCQ][YouTube: System Design Interview]]                                                       |
** Process Of System Design
| Num | Name                                            | Summary                                                              |
|-----+-------------------------------------------------+----------------------------------------------------------------------|
|   1 | Outline use cases: List major and focus on some | Show good sense. The questions you asked define your level           |
|   2 | Estimate scale: *Data* + *Traffic*              | Back-of-the-envelope estimation                                      |
|   3 | Defining data model                             | It helps to clarify how data will flow among different components    |
|   4 | Abstract design                                 | Sketch main components, explain workflow, avoid too deep for details |
|   5 | Detailed design + discussion with interviewers  | Explain trade-off of your proposal + on-demand deep dive             |
|   6 | Identify and resolve Bottlenecks                | *Key challenges* + *Trade-Offs*. Usuaully no optimal solution(s)     |
|   7 | [[https://docs.microsoft.com/en-us/azure/architecture/guide/pillars][Scale your design]]                               | Availability, Resiliency, Scalability, Security, Serviceability, etc |
#+TBLFM: $1=@-1$1+1;N

#+BEGIN_HTML
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ac&ref=qf_sp_asin_til&ad_type=product_link&tracking_id=dennyzhang-20&marketplace=amazon&region=US&placement=B06XPJML5D&asins=B06XPJML5D&linkId=9688cd3adb81a953935114b68a65989e&show_border=false&link_opens_in_new_window=false&price_color=333333&title_color=0066c0&bg_color=ffffff">
</iframe>
#+END_HTML
** Top 20 Design Problems For Technical Modules
| Num | Name                                                       | Summary          |
|-----+------------------------------------------------------------+------------------|
|   1 | [[https://architect.dennyzhang.com/design-distributed-counter][Design a distributed counter]]                               | [[https://architect.dennyzhang.com/design-distributed-counter][link]], [[https://www.slideshare.net/kevinweil/rainbird-realtime-analytics-at-twitter-strata-2011/59-If_You_Only_Remember_One][link]]       |
|   2 | [[https://architect.dennyzhang.com/explain-delayedqueue][Delayed task scheduling]]                                    | [[https://architect.dennyzhang.com/explain-delayedqueue][link]]             |
|   3 | [[https://architect.dennyzhang.com/design-concurrent-hashmap][Design a thread-safe Hashmap]]                               | [[https://architect.dennyzhang.com/design-concurrent-hashmap][link]], [[https://www.geeksforgeeks.org/internal-working-of-hashmap-java/][link]]       |
|   4 | [[https://architect.dennyzhang.com/design-api-limiter/][Design An API Rate Limiter]]                                 | [[https://architect.dennyzhang.com/design-api-limiter/][link]], [[https://nordicapis.com/everything-you-need-to-know-about-api-rate-limiting/][link]], [[https://konghq.com/blog/how-to-design-a-scalable-rate-limiting-algorithm/][link]] |
|   5 | Design a distributed UUID generator                        |                  |
|-----+------------------------------------------------------------+------------------|
|   6 | Design a distributed Hashmap                               |                  |
|   7 | [[https://architect.dennyzhang.com/design-parkinglot/][Design: A Parking Lot Service]]                              | [[https://github.com/donnemartin/system-design-primer/blob/master/solutions/object_oriented_design/parking_lot/parking_lot.ipynb][link]]             |
|   8 | Design data sync for a distributed system                  |                  |
|   9 | Design A big file transfer feature                         |                  |
|-----+------------------------------------------------------------+------------------|
|  10 | Design a distributed transaction                           |                  |
|  11 | [[https://architect.dennyzhang.com/design-url-redirect/][Design: A URL Redirecting Feature]]                          |                  |
|  12 | Top URL hits                                               |                  |
|  13 | Unique url hits                                            |                  |
|  14 | Design a distributed transactions                          |                  |
|  15 | Design a load balancer                                     |                  |
|  16 | Design a client-server API to build a rich document editor |                  |
|  17 | Design online/offline status system                        |                  |
|  18 | Design a circuit breaker                                   |                  |
|  19 | Design a service auto-discovery feature                    |                  |
|  20 | Design a secrets management system                         |                  |
#+TBLFM: $1=@-1$1+1;N
** Top 20 Design Problems For A Complex Product
| Num | Name                                       | Summary |
|-----+--------------------------------------------+---------|
|   1 | Design K/V DB                              |         |
|   2 | [[https://architect.dennyzhang.com/design-url-redirect/][Design: TinyURL - A URL Shorterner Service]] |         |
|   3 | [[https://architect.dennyzhang.com/design-uber/][Design: Uber Backend]]                       |         |
|   4 | Design an API gateway                      |         |
|   5 | Design twitter news feed                   | [[https://medium.com/@narengowda/system-design-for-twitter-e737284afc95][link]]    |
|   6 | [[https://architect.dennyzhang.com/design-elevator/][Design: An Elevator Service]]                |         |
|-----+--------------------------------------------+---------|
|   7 | Design web crawler                         |         |
|   8 | Design amazon shopping cart                |         |
|   9 | [[https://architect.dennyzhang.com/design-google-suggestion/][Design: Google Suggestion Service]]          |         |
|  10 | Design a payment processor                 |         |
|  11 | Design google doc                          |         |
|  12 | Design gmail                               |         |
|  13 | Design instagram, a photo sharing app      |         |
|  14 | Design Yelp, a location-based system       |         |
|  15 | Design Pastebin.com                        |         |
|  16 | Design amazon book recommendation system   |         |
|  17 | Google autocomplete                        |         |
|  18 | Design Google PageRank                     |         |
|  19 | Design messaging/notification system       |         |
|  20 | Design search post system                  |         |
|  21 | [[https://architect.dennyzhang.com/design-redis][Design memcache/redis]]                      |         |
|  22 | Design typeahead                           |         |
|  23 | Design Google Adsense fraud detection      |         |
|  24 | Design a voice conference system           |         |
|  25 | Design slack                               |         |
#+TBLFM: $1=@-1$1+1;N
** Top 30 Concepts For Feature/System Design
| Num | Name                                    | Summary                                                             |
|-----+-----------------------------------------+---------------------------------------------------------------------|
|   1 | [[https://architect.dennyzhang.com/explain-cache][Caching]]                                 | Stores data so that future requests of data retrieval can be faster |
|   2 | [[https://architect.dennyzhang.com/explain-messagequeue][Message Queue]]                           | Provides an asynchronous communications protocol,                   |
|   3 | [[https://architect.dennyzhang.com/explain-partition][Data Partition & Sharding]]               | Break up a big data volume into many smaller parts                  |
|   4 | [[https://architect.dennyzhang.com/explain-indexing][DB Indexing]]                             | Create indexes on multiple columns to speed up table look up        |
|   5 | [[https://architect.dennyzhang.com/explain-db-replication][DB replication]]                          | Duplicate data to increase service availability                     |
|   6 | [[https://architect.dennyzhang.com/explain-cap][CAP: Consistency/Availability/Partition]] | A distributed database system can only have 2 of the 3              |
|   7 | [[https://architect.dennyzhang.com/explain-nosql][DB: SQL & NoSQL]]                         | Relational databases and non-relational databases                   |
|-----+-----------------------------------------+---------------------------------------------------------------------|
|   8 | [[https://architect.dennyzhang.com/explain-coordination][Concurrency & Communication]]             |                                                                     |
|   9 | [[https://architect.dennyzhang.com/explain-locks][Pessimistic And Optimistic Locking]]      |                                                                     |
|  10 | [[https://architect.dennyzhang.com/explain-eventualconsistency][Consistency Module]]                      | weak consistency, eventual consistency, strong consistency          |
|  11 | Conflict resolution                     | Quorum, vector lock, reconcile on read/write, CRDT                  |
|  12 | B+ Tree                                 |                                                                     |
|-----+-----------------------------------------+---------------------------------------------------------------------|
|  13 | [[https://architect.dennyzhang.com/explain-http][Networking: HTTP]]                        |                                                                     |
|  14 | [[https://architect.dennyzhang.com/explain-poll-push][Pull vs Push model]]                      |                                                                     |
|  15 | Garbage Collection                      |                                                                     |
|  16 | [[https://architect.dennyzhang.com/explain-memory-management][Memory Management]]                       |                                                                     |
|  17 | [[https://architect.dennyzhang.com/explain-heartbeat][Heartbeats]]                              |                                                                     |
|  18 | Self Protection                         | API Rate limit, [[https://en.wikipedia.org/wiki/Circuit_breaker][Circuit breaker]], [[https://en.wikipedia.org/wiki/Bulkhead_(partition)][bulkhead]], throttling               |
|  19 | Filesystem                              |                                                                     |
|  20 | API: gRPC vs REST                       |                                                                     |
|  21 | [[https://architect.dennyzhang.com/explain-loadbalancer][Load balancer]]                           |                                                                     |
|  22 | Scale up vs Scale out                   | Vertical scaling and Horizontal scaling                             |
|  23 | API Design                              |                                                                     |
|  24 | [[https://architect.dennyzhang.com/explain-session][Session management]]                      |                                                                     |
|  25 | Networking: TCP vs UDP                  |                                                                     |
|  26 | Consistency patterns                    | Weak consistency, Eventual consistency, Strong consistency          |
|  27 | Availability patterns                   | Fail-over vs Replication                                            |
|  28 | CDN - Content Delivery Network          | Edge caching                                                        |
|  29 | [[https://architect.dennyzhang.com/explain-monitoring][Monitoring]]                              |                                                                     |
|  30 | Security                                |                                                                     |
|  31 | [[https://architect.dennyzhang.com/explain-dns][Networking: DNS]]                         |                                                                     |
|  32 | Linux signals                           |                                                                     |
#+TBLFM: $1=@-1$1+1;N

#+BEGIN_HTML
<a href="https://cheatsheet.dennyzhang.com"><img align="right" width="185" height="37" src="https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/images/cheatsheet_dns.png"></a>
#+END_HTML
** Top 15 Advanced Data Structure & Algorithms
| Num | Name                                      | Summary                                                                     |
|-----+-------------------------------------------+-----------------------------------------------------------------------------|
|   1 | [[https://architect.dennyzhang.com/explain-consistent-hash][Consistent Hash]]                           |                                                                             |
|   2 | [[https://architect.dennyzhang.com/explain-delayedqueue][Delayed queue]]                             | Run scheduled tasks                                                         |
|   3 | [[https://architect.dennyzhang.com/explain-bloomfilter][Bloom filter]]                              | A space-effcient query returns either "possibly in set" or "definitely not" |
|-----+-------------------------------------------+-----------------------------------------------------------------------------|
|   4 | [[https://architect.dennyzhang.com/explain-crdts][CRDT(Conflict-Free Replicated Data Types)]] |                                                                             |
|   5 | [[https://architect.dennyzhang.com/explain-sstable][SSTable (Sorted Strings Table)]]            |                                                                             |
|   6 | [[https://architect.dennyzhang.com/explain-lsm][LSM (Log Structured Merge Trees)]]          |                                                                             |
|   7 | [[https://architect.dennyzhang.com/explain-gossip][Gossip]]                                    | Propagate cluster status                                                    |
|-----+-------------------------------------------+-----------------------------------------------------------------------------|
|   8 | [[https://en.wikipedia.org/wiki/Two-phase_commit_protocol][Two-phase commit]]/[[https://en.wikipedia.org/wiki/Three-phase_commit_protocol][Three-phase commit]]       |                                                                             |
|  10 | [[https://architect.dennyzhang.com/explain-vector-clocks][Vector Clocks/Version Vectors]]             |                                                                             |
|  11 | [[https://architect.dennyzhang.com/design-explain-paxos][Paxos and raft protocol]]                   |                                                                             |
|  12 | Merkle Tree                               |                                                                             |
#+TBLFM: $1=@-1$1+1;N

[[image-blog:CheatSheet: Feature Design For Job Interview][https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/cheatsheet-featuredesign-A4/dynamo-summary.png]]
** Explain workflow: What happens when XXX?
| Num | Name                                          | Summary |
|-----+-----------------------------------------------+---------|
|   1 | When happens when I search in google?         |         |
|   2 | How loadbalancer works                        |         |
|   3 | Explain three phase commit model              |         |
|   4 | Explain HTTP return code                      |         |
|   5 | Explain Mysql DB replication model            |         |
|   6 | Explain gossip protocol                       |         |
|   7 | [[https://architect.dennyzhang.com/explain-cap][Explain CAP]]                                   |         |
|   8 | Explain Hadoop file system                    |         |
|   9 | [Linux] Explain OS booting process            |         |
|  10 | [Linux] What happens, when running "ls -l *"  |         |
|  11 | [Linux]What happens, when pressing "Ctrl + c" |         |
#+TBLFM: $1=@-1$1+1;N
** Explain tools: how XXX supports XXX?
| Num | Name                                  | Summary |
|-----+---------------------------------------+---------|
|   1 | How JDK implement hashmap?            |         |
|   2 | Explain java garbage collection model |         |
|   3 | Explain raft/etcd                     |         |
|   4 | How OS supports XXX?                  |         |
#+TBLFM: $1=@-1$1+1;N
** Cloud Design Principles
| Num | Name                       | Summary                 |
|-----+----------------------------+-------------------------|
|   1 | Fail fast                  |                         |
|   2 | Design for failure         |                         |
|   3 | Immutable infrastructure   |                         |
|   4 | [[https://www.engineyard.com/blog/pets-vs-cattle][Cats vs Cattle]]             | Avoid snowflake servers |
|   5 | [[https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/self-healing][Auto healing]]               |                         |
|   6 | Async programming          |                         |
|   7 | GitOps operational model   |                         |
|   8 | Event-Driven Architectures |                         |
#+TBLFM: $1=@-1$1+1;N
** Cloud Design Patterns
| Num | Name                        | Summary                                                                 |
|-----+-----------------------------+-------------------------------------------------------------------------|
|   1 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/ambassador][Ambassador pattern]]          | Create helper service to send network requests, besides the main sevice |
|   2 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/cache-aside][Cache-Aside pattern]]         | Load data on demand into a cache from a data store                      |
|   3 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker][Circuit Breaker pattern]]     | If a request takes too many reousrce, abort it                          |
|   4 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/bulkhead][Bulkhead pattern]]            | Isolate elements into pools, so that one fire won't burn all            |
|   5 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/gateway-aggregation][Gateway Aggregation pattern]] | Aggregate multiple individual requests into a single request            |
|   6 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/priority-queue][Priority Queue pattern]]      | Support different SLAs for different individual clients                 |
|   7 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler][Strangler pattern]]           | Incrementally migrate a legacy system piece by piece                    |
#+TBLFM: $1=@-1$1+1;N
#+BEGIN_HTML
<a href="https://cheatsheet.dennyzhang.com"><img align="right" width="185" height="37" src="https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/images/cheatsheet_dns.png"></a>
#+END_HTML
** Engineering Of Well-Known Products
| Name          | Summary                                                  |
|---------------+----------------------------------------------------------|
| Google        | [[http://highscalability.com/google-architecture][Link: Google Architecture]]                                |
| Facebook      | [[http://highscalability.com/blog/2016/6/27/how-facebook-live-streams-to-800000-simultaneous-viewers.html][Link: Facebook Live Streams]]                              |
| Twitter       | [[http://highscalability.com/blog/2016/4/20/how-twitter-handles-3000-images-per-second.html][Link: Twitter Image Service]], [[https://www.infoq.com/presentations/Twitter-Timeline-Scalability/][YouTube: Timelines at Scale]] |
| Uber          | [[http://highscalability.com/blog/2016/10/12/lessons-learned-from-scaling-uber-to-2000-engineers-1000-ser.html][Link: Lessons Learned From Scaling Uber]]                  |
| Tumblr        | [[http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html][Link: Tumblr Architecture]]                                |
| StackOverflow | [[http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html][Link: Stack Overflow Architecture]]                        |
** Grow Design Expertise In Daily Work
| Num | Name                             | Summary                                                                 |
|-----+----------------------------------+-------------------------------------------------------------------------|
|   1 | Keep the curiosity               | Thinking about interesting/weird questions helps                        |
|   2 | Deep dive into your daily work   | Unify and normalize problems from daily work                            |
|   3 | Learn the work of your coleagues | Indirect working experience also help                                   |
|   4 | Popular products under the hood  | Once you notice an interesting feature, think about how it's supported? |
|   5 | Read engineering blogs           | Especially for big companies                                            |
|   6 | Tools under the hood             | Common tools/frameworks                                                 |
|   7 | Try tools                        | Use cases; Alternatives; Pros and Cons                                  |
|   8 | Read papers                      | Best practices in papers                                                |
|   9 | Try new things                   | Gain hands-on experience; evaluate alternatives                         |
|  10 | Datastore & OS                   | Learn how databases and operating systems work                          |
|  11 | Language implementation          | Deep dive into one programming language. Java, Python, Golang, etc      |
#+TBLFM: $1=@-1$1+1;N
** Engineering Blogs/Websites
| Name                 | Summary                                                             |
|----------------------+---------------------------------------------------------------------|
| Compnay Tech Blog    | [[https://www.facebook.com/pg/Engineering/notes/][Website: Facebook Engineering]], [[https://developers.googleblog.com][Website: Google Developers]]           |
| Compnay Tech Blog    | [[https://medium.com/netflix-techblog][Medium: Netflix Blog]], [[https://medium.com/airbnb-engineering][Medium: Airbnb Engineering & Data Science]]     |
| Compnay Tech Blog    | [[https://engineering.shopify.com/][Shopify Engineering]], [[https://github.blog/category/engineering/][Github Engineering]]                             |
|----------------------+---------------------------------------------------------------------|
| Website              | [[https://www.hiredintech.com/app#system-design][Website: hiredintech - System Design]]                                |
| Website              | [[https://interviewing.io][Website: interviewing.io]], [[https://www.interviewbit.com/courses/system-design/][Website: interviewbit.com]]                 |
| Reference            | [[https://www.facebook.com/careers/life/preparing-for-your-software-engineering-interview-at-facebook/][Link: Preparing for your Software Engineering Interview at Facebook]] |
| Reference            | [[https://www.hiredintech.com/classrooms/system-design/lesson/55][Link: The System Design Process]]                                     |
| Individual Tech Blog | [[https://www.allthingsdistributed.com][Blog: All Things Distributed - Amazon CTO]], [[http://highscalability.com/][Blog: highscalability]]    |
** Typical Trade-Off
| Num | Name                        | Summary              |
|-----+-----------------------------+----------------------|
|   1 | Performance vs Scalability  |                      |
|   2 | Latency vs Throughput       |                      |
|   3 | Availability vs Consistency | Brewer's CAP theorem |
#+TBLFM: $1=@-1$1+1;N
** Misc
| Num | Name                                                                            | Summary                           |
|-----+---------------------------------------------------------------------------------+-----------------------------------|
|   1 | How to store 2TB data into 3 disks of 1TB. And be tolerant for one disk failure | A, B, C. And C = A XOR B          |
|   2 | Find out the difference between two files. Majority of these two are the same   | [[https://code.dennyzhang.com/followup-lcs][#lcs - Longest Common Subsequence]] |
|   3 | How to support feature of "diff 1.txt 2. txt"                                   |                                   |
|   4 | Avoid double payment in a distributed payment system                            | [[https://medium.com/airbnb-engineering/avoiding-double-payments-in-a-distributed-payments-system-2981f6b070bb][link]]                              |
#+TBLFM: $1=@-1$1+1;N
** More Resources
License: Code is licensed under [[https://www.dennyzhang.com/wp-content/mit_license.txt][MIT License]].

https://github.com/binhnguyennus/awesome-scalability

https://github.com/donnemartin/system-design-primer

https://github.com/checkcheckzz/system-design-interview

https://github.com/binhnguyennus/awesome-scalability

https://docs.microsoft.com/en-us/azure/architecture/patterns/

#+BEGIN_HTML
<a href="https://cheatsheet.dennyzhang.com"><img align="right" width="201" height="268" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/denny_201706.png"></a>

<a href="https://cheatsheet.dennyzhang.com"><img align="right" src="https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/images/cheatsheet_dns.png"></a>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-systemdesign-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-systemdesign-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-systemdesign-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
* TODO [经验总结] 关于所谓的System Design: https://www.1point3acres.com/bbs/thread-169343-1-1.html :noexport:
* TODO [题目讨论] 系统设计问题/面试题总结: https://www.1point3acres.com/bbs/thread-541834-1-1.html :noexport:
* TODO System design: https://www.1point3acres.com/bbs/forum-323-1.html :noexport:
* TODO system design: https://www.1point3acres.com/bbs/thread-171320-1-1.html :noexport:
* design                                                           :noexport:
- work through the workflow
* TODO https://www.1point3acres.com/bbs/forum-323-1.html           :noexport:
* TODO 设计ip cache缓存之类的                                      :noexport:
* [#A] soulmachine系统设计(System Design) https://soulmachine.gitbooks.io/system-design/content/cn/distributed-id-generator.html :noexport:
* TODO https://www.hiredintech.com/app#system-design               :noexport:
* TODO news feed: https://36kr.com/p/201758                        :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO design twitter                                              :noexport:
https://medium.com/@narengowda/system-design-for-twitter-e737284afc95
* TODO Kafka vs Rabbitmq                                           :noexport:
* system design                                                    :noexport:
https://www.facebook.com/careers/life/preparing-for-your-software-engineering-interview-at-facebook/
The purpose of the interview is to assess the candidate's ability to solve a non-trivial engineering design problem.

There are two types of design interviews: systems design and product design.

Start with requirements: Your interviewer might ask: "How would you architect the backend for a messaging system?" Obviously this question is extremely vague. Where do you even start? You could start with some requirements:
How many users are we talking about here?
How many messages sent?
How many messages read?
What are the latency requirements for sender->receiver message delivery?
How are you going to store messages?
What operations does this data store need to support?
What operations is it optimized for?
How do you push new messages to clients? Do you push at all, or rely on a pull based model?
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO What's your own familiar area? expertise?                   :noexport:
* TODO What Complex products you have designed before?             :noexport:
Reflect on your projects: Think about the projects you've built. What was easy, and what was difficult?

List your projects
List good improvements/tech challenges/open issues
* TODO How to structurally analyize a product                      :noexport:
- Feature/Use case
- How to avoid abuse?
- How to support different version?
- Upgrade workflow
* TODO https://github.com/shishan100/Java-Interview-Advanced       :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO cross dataset sync                                          :noexport:
* TODO Read links                                                  :noexport:
http://highscalability.com/blog/2011/11/29/datasift-architecture-realtime-datamining-at-120000-tweets-p.html
https://www.youtube.com/watch?v=w5WVu624fY8
https://www.youtube.com/watch?v=5cKTP36HVgI
http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html
http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html
http://highscalability.com/plentyoffish-architecture
http://highscalability.com/blog/2016/6/15/the-image-optimization-technology-that-serves-millions-of-re.html
http://highscalability.com/blog/2017/10/23/one-model-at-a-time-integrating-and-running-deep-learning-mo.html
http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html
* TODO Scalability for Dummies                                     :noexport:
https://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones
https://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database
https://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache
https://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism
* Understand big IT corps in US                                    :noexport:
https://www.1point3acres.com/bbs/thread-169418-1-1.html
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO design k/v db store                                         :noexport:
* TODO 某建筑有五十层高,打算装俩电梯,设计该电梯系统                :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO How to implement a singleton                                :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO design uber                                                 :noexport:
http://systemdesigns.blogspot.com/2015/12/design-uber.html
* TODO design google doc                                           :noexport:
* TODO read: https://www.1point3acres.com/bbs/thread-208829-1-1.html :noexport:
* TODO How to design API gateway                                   :noexport:
* TODO design amazon book recommend system                         :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO design 多线程题 例如web crawler, max photo                 :noexport:
* TODO How would you design a car radio system interface           :noexport:
* TODO caching mechanism: lru, lfu                                 :noexport:
* Typical Tech Areas                                               :noexport:
| Num | Summary                            |
|-----+------------------------------------|
|   1 | Distributed Database               |
|   2 | Task scheduling                    |
|   3 | LCM - life cycle management        |
|   4 | Logging & Monitoring               |
|   5 | Security                           |
|   6 | SDDC - Software defined datacenter |
#+TBLFM: $1=@-1$1+1;N

* Classic Design Problems - Big Data                               :noexport:
| Num | Name                                                          | Summary      |
|-----+---------------------------------------------------------------+--------------|
|   1 | Reservoir sampling                                            |              |
|   2 | Frequency estimation                                          |              |
|   3 | Heavy hitters - Find top k frequent items in a data stream    |              |
|   4 | Membership query - whether an element exists in a data stream | [[https://en.wikipedia.org/wiki/Bloom_filter][bloom filter]] |
|   5 | Get median from an endless data stream                        |              |
#+TBLFM: $1=@-1$1+1;N

* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO Design Recommend System                                     :noexport:
* TODO Take turns to ask questions                                 :noexport:
好的问题,间接告诉了对方我们的经验和思维深度和广度
* TODO Design Mint.com                                             :noexport:
* TODO Design leetcode                                             :noexport:
* TODO In what scenarios, you would choose "linked list" over "array list"? :noexport:
https://www.1point3acres.com/bbs/thread-562110-1-1.html
